// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace NorthwindWebApi.Models;

public partial class NorthwindSQLitedbContext : DbContext
{
    public NorthwindSQLitedbContext(DbContextOptions<NorthwindSQLitedbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerDemographic> CustomerDemographics { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderDetail> OrderDetails { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<Shipper> Shippers { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<Territory> Territories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasIndex(e => e.CategoryName, "Categories_CategoryName");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.Description).HasColumnType("ntext");
            entity.Property(e => e.Picture).HasColumnType("image");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasIndex(e => e.City, "Customers_City");

            entity.HasIndex(e => e.CompanyName, "Customers_CompanyName");

            entity.HasIndex(e => e.PostalCode, "Customers_PostalCode");

            entity.HasIndex(e => e.Region, "Customers_Region");

            entity.Property(e => e.CustomerId)
                .HasColumnType("nchar(5)")
                .HasColumnName("CustomerID");
            entity.Property(e => e.Address)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(60)");
            entity.Property(e => e.City)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(40)");
            entity.Property(e => e.ContactName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(30)");
            entity.Property(e => e.ContactTitle)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(30)");
            entity.Property(e => e.Country)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.Fax)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(24)");
            entity.Property(e => e.Phone)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(24)");
            entity.Property(e => e.PostalCode)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(10)");
            entity.Property(e => e.Region)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");

            entity.HasMany(d => d.CustomerTypes).WithMany(p => p.Customers)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerCustomerDemo",
                    r => r.HasOne<CustomerDemographic>().WithMany()
                        .HasForeignKey("CustomerTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Customer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("CustomerId", "CustomerTypeId");
                        j.ToTable("CustomerCustomerDemo");
                        j.IndexerProperty<string>("CustomerId")
                            .HasColumnType("nchar(5)")
                            .HasColumnName("CustomerID");
                        j.IndexerProperty<string>("CustomerTypeId")
                            .UseCollation("NOCASE")
                            .HasColumnType("nchar(10)")
                            .HasColumnName("CustomerTypeID");
                    });
        });

        modelBuilder.Entity<CustomerDemographic>(entity =>
        {
            entity.HasKey(e => e.CustomerTypeId);

            entity.Property(e => e.CustomerTypeId)
                .HasColumnType("nchar(10)")
                .HasColumnName("CustomerTypeID");
            entity.Property(e => e.CustomerDesc).HasColumnType("ntext");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasIndex(e => e.LastName, "Employees_LastName");

            entity.HasIndex(e => e.PostalCode, "Employees_PostalCode");

            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Address)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(60)");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.City)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.Country)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.Extension)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(4)");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(10)");
            entity.Property(e => e.HireDate).HasColumnType("datetime");
            entity.Property(e => e.HomePhone)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(24)");
            entity.Property(e => e.LastName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(20)");
            entity.Property(e => e.Notes).HasColumnType("ntext");
            entity.Property(e => e.Photo).HasColumnType("image");
            entity.Property(e => e.PhotoPath)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(255)");
            entity.Property(e => e.PostalCode)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(10)");
            entity.Property(e => e.Region)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.ReportsTo).HasColumnType("INT");
            entity.Property(e => e.Title)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(30)");
            entity.Property(e => e.TitleOfCourtesy)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(25)");

            entity.HasOne(d => d.ReportsToNavigation).WithMany(p => p.InverseReportsToNavigation).HasForeignKey(d => d.ReportsTo);

            entity.HasMany(d => d.Territories).WithMany(p => p.Employees)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeTerritory",
                    r => r.HasOne<Territory>().WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    l => l.HasOne<Employee>().WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientSetNull),
                    j =>
                    {
                        j.HasKey("EmployeeId", "TerritoryId");
                        j.ToTable("EmployeeTerritories");
                        j.IndexerProperty<int>("EmployeeId")
                            .HasColumnType("INT")
                            .HasColumnName("EmployeeID");
                        j.IndexerProperty<string>("TerritoryId")
                            .UseCollation("NOCASE")
                            .HasColumnType("nvarchar(20)")
                            .HasColumnName("TerritoryID");
                    });
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasIndex(e => e.CustomerId, "Orders_CustomerID");

            entity.HasIndex(e => e.CustomerId, "Orders_CustomersOrders");

            entity.HasIndex(e => e.EmployeeId, "Orders_EmployeeID");

            entity.HasIndex(e => e.EmployeeId, "Orders_EmployeesOrders");

            entity.HasIndex(e => e.OrderDate, "Orders_OrderDate");

            entity.HasIndex(e => e.ShipPostalCode, "Orders_ShipPostalCode");

            entity.HasIndex(e => e.ShippedDate, "Orders_ShippedDate");

            entity.HasIndex(e => e.ShipVia, "Orders_ShippersOrders");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.CustomerId)
                .UseCollation("NOCASE")
                .HasColumnType("nchar(5)")
                .HasColumnName("CustomerID");
            entity.Property(e => e.EmployeeId)
                .HasColumnType("INT")
                .HasColumnName("EmployeeID");
            entity.Property(e => e.Freight)
                .HasDefaultValue(0.0)
                .HasColumnType("money");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.RequiredDate).HasColumnType("datetime");
            entity.Property(e => e.ShipAddress)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(60)");
            entity.Property(e => e.ShipCity)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.ShipCountry)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.ShipName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(40)");
            entity.Property(e => e.ShipPostalCode)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(10)");
            entity.Property(e => e.ShipRegion)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.ShipVia).HasColumnType("INT");
            entity.Property(e => e.ShippedDate).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders).HasForeignKey(d => d.CustomerId);

            entity.HasOne(d => d.Employee).WithMany(p => p.Orders).HasForeignKey(d => d.EmployeeId);

            entity.HasOne(d => d.ShipViaNavigation).WithMany(p => p.Orders).HasForeignKey(d => d.ShipVia);
        });

        modelBuilder.Entity<OrderDetail>(entity =>
        {
            entity.HasKey(e => new { e.OrderId, e.ProductId });

            entity.HasIndex(e => e.OrderId, "Order Details_OrderID");

            entity.HasIndex(e => e.OrderId, "Order Details_OrdersOrder_Details");

            entity.HasIndex(e => e.ProductId, "Order Details_ProductID");

            entity.HasIndex(e => e.ProductId, "Order Details_ProductsOrder_Details");

            entity.Property(e => e.OrderId)
                .HasColumnType("INT")
                .HasColumnName("OrderID");
            entity.Property(e => e.ProductId)
                .HasColumnType("INT")
                .HasColumnName("ProductID");
            entity.Property(e => e.Quantity)
                .HasDefaultValue((short)1)
                .HasColumnType("smallint");
            entity.Property(e => e.UnitPrice).HasColumnType("money");

            entity.HasOne(d => d.Order).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Product).WithMany(p => p.OrderDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasIndex(e => e.CategoryId, "Products_CategoriesProducts");

            entity.HasIndex(e => e.CategoryId, "Products_CategoryID");

            entity.HasIndex(e => e.ProductName, "Products_ProductName");

            entity.HasIndex(e => e.SupplierId, "Products_SupplierID");

            entity.HasIndex(e => e.SupplierId, "Products_SuppliersProducts");

            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.CategoryId)
                .HasColumnType("INT")
                .HasColumnName("CategoryID");
            entity.Property(e => e.Discontinued).HasColumnType("bit");
            entity.Property(e => e.ProductName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(40)");
            entity.Property(e => e.QuantityPerUnit)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(20)");
            entity.Property(e => e.ReorderLevel)
                .HasDefaultValue((short)0)
                .HasColumnType("smallint");
            entity.Property(e => e.SupplierId)
                .HasColumnType("INT")
                .HasColumnName("SupplierID");
            entity.Property(e => e.UnitPrice)
                .HasDefaultValue(0.0)
                .HasColumnType("money");
            entity.Property(e => e.UnitsInStock)
                .HasDefaultValue((short)0)
                .HasColumnType("smallint");
            entity.Property(e => e.UnitsOnOrder)
                .HasDefaultValue((short)0)
                .HasColumnType("smallint");

            entity.HasOne(d => d.Category).WithMany(p => p.Products).HasForeignKey(d => d.CategoryId);

            entity.HasOne(d => d.Supplier).WithMany(p => p.Products).HasForeignKey(d => d.SupplierId);
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.ToTable("Region");

            entity.Property(e => e.RegionId)
                .ValueGeneratedNever()
                .HasColumnType("INT")
                .HasColumnName("RegionID");
            entity.Property(e => e.RegionDescription)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nchar(50)");
        });

        modelBuilder.Entity<Shipper>(entity =>
        {
            entity.Property(e => e.ShipperId).HasColumnName("ShipperID");
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(40)");
            entity.Property(e => e.Phone)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(24)");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasIndex(e => e.CompanyName, "Suppliers_CompanyName");

            entity.HasIndex(e => e.PostalCode, "Suppliers_PostalCode");

            entity.Property(e => e.SupplierId).HasColumnName("SupplierID");
            entity.Property(e => e.Address)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(60)");
            entity.Property(e => e.City)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(40)");
            entity.Property(e => e.ContactName)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(30)");
            entity.Property(e => e.ContactTitle)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(30)");
            entity.Property(e => e.Country)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
            entity.Property(e => e.Fax)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(24)");
            entity.Property(e => e.HomePage).HasColumnType("ntext");
            entity.Property(e => e.Phone)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(24)");
            entity.Property(e => e.PostalCode)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(10)");
            entity.Property(e => e.Region)
                .UseCollation("NOCASE")
                .HasColumnType("nvarchar(15)");
        });

        modelBuilder.Entity<Territory>(entity =>
        {
            entity.Property(e => e.TerritoryId)
                .HasColumnType("nvarchar(20)")
                .HasColumnName("TerritoryID");
            entity.Property(e => e.RegionId)
                .HasColumnType("INT")
                .HasColumnName("RegionID");
            entity.Property(e => e.TerritoryDescription)
                .IsRequired()
                .UseCollation("NOCASE")
                .HasColumnType("nchar(50)");

            entity.HasOne(d => d.Region).WithMany(p => p.Territories)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}